


#nstall.packages('dplyr')
library(dplyr)

mydata = read.csv("C:\\Users\\amkuma\\Documents\\sampledata.csv")
a=sample_n(mydata,3)
a=sample_frac(mydata,0.5)
a=distinct(mydata) 


# Remove Duplicate Rows based on a variable
a=distinct(mydata,State , .keep_all= TRUE)


# Remove Duplicates Rows based on multiple variables

a = distinct(mydata, Index, Y2010, .keep_all= TRUE)

# Selecting Variables (or Columns)

a = select(mydata, Index:Y2008)
colnames(a)

# Dropping Variables

a= select(mydata, -c(Index,State))


# Selecting or Dropping Variables starts with 'Y'


a = select(mydata, starts_with("Y"))

# Adding a negative sign before starts_with() implies dropping the variables starts with 'Y'

a=select(mydata, -starts_with("Y"))


# 
# starts_with()  Starts with a prefix
# ends_with()	Ends with a prefix
# contains()	Contains a literal string
# matches()	Matches a regular expression
# num_range()	Numerical range like x01, x02, x03.
# one_of()	Variables in character vector.
# everything()	All variables.


a=select(mydata, contains("I"))

# 
# Reorder Variables

a=select(mydata, State, everything())


# rename() syntax : rename(data , new_name = old_name)
# data : Data Frame
# new_name : New variable name you want to keep
# old_name : Existing Variable Name


# Rename Variables 'Index' variable to 'Index1'.

mydata6 = rename(mydata, Index1=Index)


# filter( ) Function

# Filter Rows


a = filter(mydata, Index == "A")


# Multiple Selection Criteria
a = filter(mydata, Index %in% c("A", "C"))


#'AND' Condition in Selection Criteria


a=filter(mydata, Index %in% c("A", "C") & Y2002 >= 1300000 )
# 
# 'OR' Condition in Selection Criteria


a=filter(mydata, Index %in% c("A", "C") | Y2002 >= 1300000)

# NOT Condition
# The grepl function is used to search for pattern matching. 
# In the following code, we are looking for records wherein column state contains 'Ar' in their name.

a = filter(mydata, grepl("Ar", State))
# 
# Summarize selected variables


summarise(mydata, Y2015_mean = mean(Y2015), Y2015_med=median(Y2015))


# Summarize Multiple Variables

# The summarise_at function allows us to select multiple variables by their names


dplyr::summarise_at(mydata, vars(Y2005, Y2006), funs(n(), mean, median))

# Summarize with Custom Functions


summarise_at(mydata, vars(Y2011, Y2012),
             funs(n(), missing = sum(is.na(.)), mean(., na.rm = TRUE), median(.,na.rm = TRUE)))



# Summarize all Numeric Variables


summarise_if(mydata, is.numeric, funs(n(),mean,median))


# First, store data for all the numeric variables

numdata = mydata[sapply(mydata,is.numeric)]


summarise_all(numdata, funs(n(),mean,median))

# Summarize Factor Variable

# number of levels/categories and count of missing observations in a categorical (factor) variable.


summarise_all(mydata["Index"], funs(nlevels(.), sum(is.na(.))))


# arrange() function is ascending. In this example, we are sorting data by multiple variables.

arrange(mydata, Index, Y2011)

# descending order and other variable by ascending oder.

arrange(mydata, desc(Index), Y2011)

# Pipe Operator %>%
#   
#   It is important to understand the pipe (%>%) operator before knowing the other functions of dplyr package. dplyr utilizes pipe operator from another package (magrittr).
# "Why to use pipe operator %>%". The answer is it lets to wrap multiple functions together with the use of  %>%

dt = sample_n(select(mydata, Index, State),10)
# 
# OR

dt = mydata %>% select(Index, State) %>% sample_n(10)



# It allows you to write sub-queries like we do it in sql.

t = summarise_at(group_by(mydata, Index), vars(Y2011, Y2012), funs(n(), mean(., na.rm = TRUE)))

# OR

t = mydata %>% group_by(Index) %>%
  summarise_at(vars(Y2011:Y2015), funs(n(), mean(., na.rm = TRUE)))


# do() function :
#   
#   Use : Compute within groups

# Suppose you need to pull top 2 rows from 'A', 'C' and 'I' categories of variable Index.

t = mydata %>% filter(Index %in% c("A", "C","I")) %>% group_by(Index) %>%
  do(head( . , 2))


# 
# We are calculating third maximum value of variable Y2015 by variable Index. The following code 
# irst selects only two variables Index and Y2015. Then it filters the variable Index with 'A', 'C' and 'I' and 
# hen it groups the same variable and sorts the variable Y2015 in descending order. At last, it selects the third row.
t = mydata %>% select(Index, Y2015) %>%
  filter(Index %in% c("A", "C","I")) %>%
  group_by(Index) %>%
  do(arrange(.,desc(Y2015))) %>%  slice(3)


# We could use min_rank() function that calculates rank in the preceding example,

t = mydata %>% select(Index, Y2015) %>%
  filter(Index %in% c("A", "C","I")) %>%
  group_by(Index) %>%
  filter(min_rank(desc(Y2015)) == 3)


# Summarize, Group and Sort Together 

mydata %>%
  group_by(Index)%>%
  summarise(Mean_2014 = mean(Y2014, na.rm=TRUE),
            Mean_2015 = mean(Y2015, na.rm=TRUE)) %>%
  arrange(desc(Mean_2015))


# mutate() function :
#   
#   Use : Creates new variables
# 
# Syntax :
#   mutate(data_frame, expression(s) )
# or
# data_frame %>% mutate(expression(s))


mutate(mydata, change=Y2015/Y2014)

# Suppose you need to calculate rank for variables Y2008 to Y2010.


mydata12 = mutate_at(mydata, vars(Y2008:Y2010), funs(Rank=min_rank(.)))


# min_rank() assigns 1 to the smallest value and high number to the largest value. 
# n case, you need to assign rank 1 to the largest value of a variable, use min_rank(desc(.))

# Select State that generated highest income among the variable 'Index


out = mydata %>% group_by(State)%>%filter(min_rank(desc(Y2015)) == 1) %>%
  select(Index, Y2015)



# Example 32 : Cumulative Income of 'Index' variable


out2 = mydata %>% group_by(Index) %>% mutate(Total=cumsum(Y2015)) %>%
  select(Index, Y2015, Total)

# join() function :
#   
#   Use : Join two datasets
# 
# Syntax :
#   inner_join(x, y, by = )
# left_join(x, y, by = )
# right_join(x, y, by = )
# full_join(x, y, by = )
# semi_join(x, y, by = )
# anti_join(x, y, by = )

df1 <- data.frame(ID = c(1, 2, 3, 4, 5),
                  w = c('a', 'b', 'c', 'd', 'e'),
                  x = c(1, 1, 0, 0, 1),
                  y=rnorm(5),
                  z=letters[1:5])


df2 <- data.frame(ID = c(1, 7, 3, 6, 8),
                  a = c('z', 'b', 'k', 'd', 'l'),
                  b = c(1, 2, 3, 0, 4),
                  c =rnorm(5),
                  d =letters[2:6])



df3 = inner_join(df1, df2, by = "ID")


# If the primary key does not have same name in both the tables, try the following way:
#   inner_join(df1, df2, by = c("ID"="ID1"))
# Combine Data Vertically
# 
# intersect(x, y)
# Rows that appear in both x and y.
# 
# union(x, y)
# Rows that appear in either or both x and y.
# 
# setdiff(x, y)
# Rows that appear in x but not y.
